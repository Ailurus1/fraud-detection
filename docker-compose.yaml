version: '3'
services:
  kafka-broker-0:
    hostname: 'kafka-0'
    image: 'bitnami/kafka:latest'
    ports:
      - '9095:9095'
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092,EXTERNAL://localhost:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1

  kafka-broker-1:
    hostname: 'kafka-1'
    image: 'bitnami/kafka:latest'
    ports:
      - '9096:9096'
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9094,CONTROLLER://:9093,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9094,EXTERNAL://localhost:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
    depends_on:
      - kafka-broker-0

  producer:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: producer
    restart: unless-stopped
    environment:
      - BOOTSTRAP_SERVERS=kafka-0:9092,kafka-1:9094
    depends_on:
      - kafka-broker-0
      - kafka-broker-1
    # TODO: think of another logic to start producing only after kafka broker is available
    command: >
      sh -c "\
        sleep 15 && \
        python3 -m service.producers"

  anonymizer:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: anonymizer
    restart: unless-stopped
    environment:
      - BOOTSTRAP_SERVERS=kafka-0:9092,kafka-1:9094
    depends_on:
      - kafka-broker-0
      - kafka-broker-1
    command: ["python", "-m", "service.anonimizer"]

  preprocessor:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: preprocessor
    restart: unless-stopped
    environment:
      - BOOTSTRAP_SERVERS=kafka-0:9092,kafka-1:9094
    volumes:
      - ./artifacts:/app/artifacts
    depends_on:
      - kafka-broker-0
      - kafka-broker-1
    command: ["python", "-m", "service.preprocessor"]

  inference:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: inference
    restart: unless-stopped
    environment:
      - BOOTSTRAP_SERVERS=kafka-0:9092,kafka-1:9094
    volumes:
      - ./artifacts:/app/artifacts
    depends_on:
      - kafka-broker-0
      - kafka-broker-1
    command: ["python", "-m", "service.inference"]

  ui:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: ui
    restart: unless-stopped
    environment:
      - BOOTSTRAP_SERVERS=kafka-0:9092,kafka-1:9094
    ports:
      - "7860:7860"
    depends_on:
      - kafka-broker-0
      - kafka-broker-1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - default
    command: ["python", "-m", "service.ui"]
